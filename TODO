Declaration of intent:

1. program which reads from stdin to a buffer, and prints to stdout when full
   - test by piping the music from sounddemo to aplay via the program

2. program which opens a canHandle, then reads from stdin to a buffer and sends
   a canMessage when the buffer is full.
   - should take channel as argument (default 0)
   - should take help argument
   - should take optional msg ID as argument
   - should take optional dlc as argument
   - should take optional timeout as argument

3. program which opens a canHandle, then reads canMessages and prints their
   contents to stdout
   - should take channel as argument (default 1)
   - should take help argument
   - should take optional msg ID as argument
   - should take optional dlc as argument
   - should take optional timeout as argument

4. test 2 and 3 together by piping a.out to 2, and piping 3 to aplay in a
   different terminal (preferably on a different machine)


Work log:
 - Implemeted main frame work including argument parsing and overall structure
 - Implemented read from stdin and sent messages to bus in upstream
 - Implemented read messages from bus and print to stdout in downstream
 - Notifies user that CAN FD is not yet supported
 - Written draft of documentation in README.md


Remains:
 - Check return status from parsing
 - Use parsed arguments to initialise channel
 - Use parsed arguments to set busrate
 - Use parsed arguments to set dlc
 - Finish markup of documentation in README.md
 - Add and test CANon example (instead of sounddemo?)
 - Add to GitHub
 - Filter on message id?
 - CAN FD support
