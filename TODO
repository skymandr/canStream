Declaration of intent:

1. program which reads from stdin to a buffer, and prints to stdout when full
   - test by piping the music from sounddemo to aplay via the program

2. program which opens a canHandle, then reads from stdin to a buffer and sends
   a canMessage when the buffer is full.
   - should take channel as argument (default 0)
   - should take help argument
   - should take optional msg ID as argument
   - should take optional dlc as argument
   - should take optional timeout as argument

3. program which opens a canHandle, then reads canMessages and prints their
   contents to stdout
   - should take channel as argument (default 1)
   - should take help argument
   - should take optional msg ID as argument
   - should take optional dlc as argument
   - should take optional timeout as argument

4. test 2 and 3 together by piping a.out to 2, and piping 3 to aplay in a
   different terminal (preferably on a different machine)


Work log:
 - Implemeted main frame work including argument parsing and overall structure
 - Implemented read from stdin and sent messages to bus in upstream
 - Implemented read messages from bus and print to stdout in downstream
 - Notifies user that CAN FD is not yet supported
 - Written draft of documentation in README.md
 - Uses parsed arguments to initialise channel
 - Uses parsed arguments to set dlc
 - Added and tested CANon example
 - Finished markup of documentation in README.md
 - Argument parser is not broken anymore
 - Verified that parsed arguments can be used to initialise channel
 - Verified that parsed arguments can be used to set dlc
 - Verified that parsed arguments can be used to set id
 - Verified that parsed arguments can be used to set timeout
 - Implemented filtering on message id
 - Uses parsed arguments to set busrate
 - Implemented CAN FD support
 - Verified that parsed arguments can be used to set busrates
 - Added to GitHub
 - Implemented more graceful exit strategy


Remains:
 - Verify that it does what it is supposed to
 - Verify CAN FD support
